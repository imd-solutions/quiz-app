services:
  mysql:
    image: mysql
    container_name: mysql_${SITE}
    restart: unless-stopped
    tty: true
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SERVICE_TAGS: ${SERVICE_TAGS}
      SERVICE_NAME: ${SERVICE_NAME}
    networks:
      - quiz_app

  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: php_${SITE}
    ports:
      - ${PHP_PORT}:9000
    volumes:
      - ./backend:/var/www/html/backend
    networks:
      - quiz_app

  backend:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: backend_${SITE}
    ports:
      - ${BACKEND_PORT}:80
    environment:
      - NGINX_HOST=${SITE_URL}
    volumes:
      - ./backend:/var/www/html/backend
    depends_on:
      - php
    networks:
      - quiz_app

  redis:
    image: redis:alpine
    container_name: redis_${SITE}
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./redis:/data
    networks:
      - quiz_app
   
  # horizon:
  #   build:
  #     context: ./php
  #     dockerfile: Dockerfile
  #   container_name: horizon_${SITE}
  #   volumes:
  #     - ./backend:/var/www/html/backend
  #   working_dir: /var/www/html/backend
  #   entrypoint: ["php", "/var/www/html/backend/artisan", "horizon"]
  #   networks:
  #     - quiz_app

  frontend:  
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_${SITE}
    tty: true # docker run -t
    ports:
      - ${FRONTEND_PORT}:3000
    volumes:
      - ./frontend/:/var/www/html/frontend/
      - /var/www/html/frontend/node_modules
    working_dir: /var/www/html/frontend
    networks:
      - quiz_app

  adminer:
    image: adminer
    container_name: adminer_${SITE}
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - quiz_app

  composer:
    profiles: ["commands"]
    build:
      context: ./composer
      dockerfile: Dockerfile
    container_name: composer_${SITE}
    volumes:
      - ./backend:/var/www/html/backend
    working_dir: /var/www/html/backend
    user: laravel
    networks:
      - quiz_app

  # npm:
  #   profiles: ["commands"]
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   container_name: npm_${SITE}
  #   volumes:
  #     - ./backend/:/var/www/html/backend/
  #     - /var/www/html/backend/node_modules
  #   working_dir: /var/www/html/backend
  #   entrypoint: ["npm"]
  #   networks:
  #     - quiz_app

  artisan:
    profiles: ["commands"]
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: artisan_${SITE}
    volumes:
      - ./backend:/var/www/html/backend
    working_dir: /var/www/html/backend
    entrypoint: ["php", "/var/www/html/backend/artisan"]
    networks:
      - quiz_app

  crontab:    
    build:
      context: ./cron
      dockerfile: Dockerfile
    container_name: cron_${SITE}
    volumes:
      - ./backend:/var/www/html/backend
    networks:
      - quiz_app

  phpunit:
    profiles: ["test"]
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: phpunit_${SITE}
    volumes:
      - ./backend:/var/www/html/backend
    working_dir: /var/www/html/backend
    entrypoint: "vendor/bin/phpunit"
    networks:
      - quiz_app

  nodepackage:
    profiles: ["test"]
    build:
      context: ./npm
      dockerfile: Dockerfile
    container_name: nodepackage_${SITE}
    volumes:
      - ./backend:/var/www/html/backend
    working_dir: /var/www/html/backend
    networks:
      - quiz_app

  jest:
    profiles: ["test"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jest_${SITE}
    volumes:
      - ./frontend/:/var/www/html/frontend/
      - /var/www/html/frontend/node_modules
    working_dir: /var/www/html/frontend
    entrypoint: ["npm", "run", "test"]
    networks:
      - quiz_app
      
networks:
  quiz_app:
    ipam:
      config:
        - subnet: ${SUBNET}/24
